
1. Add dependency in pom install maven update project


	<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
	</dependency>

2.

spring.security.user.name=Gourab
spring.security.user.password=password

3. open in brouser http://localhost:8080/students

4. a> Create package config
   b> CReate Class SecurityConfig
   
   
 package com.example.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.web.DefaultSecurityFilterChain;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@EnableWebSecurity
public class SecurityConfig {

	@Bean
    public UserDetailsService userDetailsService(PasswordEncoder encoder) {
        UserDetails admin = User.withUsername("Gourab")
                .password(encoder.encode("gourab"))
                .roles("ADMIN")
                .build();
        UserDetails user = User.withUsername("Anju")
                .password(encoder.encode("anju"))
                .roles("USER","ADMIN","HR")
                .build();
        return new InMemoryUserDetailsManager(admin, user);
    }

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        DefaultSecurityFilterChain build = http.csrf().disable()
                .authorizeHttpRequests()
                .requestMatchers("/students/welcome").permitAll()
                .and()
                .authorizeHttpRequests().requestMatchers("/students/**")
                .authenticated().and()
//                .httpBasic()
                .formLogin()
                .and().build();
		return build;
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }


}

