1.

package com.example.demo.controller;


package com.example.demo.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.entity.Student;
import com.example.demo.repository.StudentRepository;

@RestController
@RequestMapping("/students")
public class StudentController {
	@Autowired
	private StudentRepository studentRepository;

	@GetMapping("/welcome")
	public String welcome() {
		return "Hello Gb";
	}

	@GetMapping("/all")
	@PreAuthorize("hasAuthority('ROLE_ADMIN')")***
	public List<Student> listAll() {
		List<Student> listStudents = studentRepository.findAll();
		return listStudents;
	}
	
	@GetMapping("{id}")
	@PreAuthorize("hasAuthority('ROLE_USER')")***
	public Optional<Student> getNameById(@PathVariable int id) {
		Optional<Student> students = studentRepository.findById(id);
		return students;
	}

}


2.package com.example.config;


package com.example.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.web.DefaultSecurityFilterChain;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@EnableWebSecurity
@EnableMethodSecurity****
public class SecurityConfig {

	@Bean
    public UserDetailsService userDetailsService(PasswordEncoder encoder) {
        UserDetails admin = User.withUsername("Gourab")
                .password(encoder.encode("gourab"))
                .roles("ADMIN")
                .build();
        UserDetails user = User.withUsername("Anju")
                .password(encoder.encode("anju"))
                .roles("USER","ADMIN","HR")
                .build();
        return new InMemoryUserDetailsManager(admin, user);
    }

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        DefaultSecurityFilterChain build = http.csrf().disable()
                .authorizeHttpRequests()
                .requestMatchers("/students/welcome").permitAll()
                .and()
                .authorizeHttpRequests().requestMatchers("/students/**")
                .authenticated().and().httpBasic().and().build();
		return build;
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }


}
